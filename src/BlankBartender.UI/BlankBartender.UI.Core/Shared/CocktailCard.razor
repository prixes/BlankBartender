@using Microsoft.Extensions.Configuration
@using MudBlazor
@using System.Collections.Generic

<MudStack AlignItems="AlignItems.Center" Class="mt-0" Row>
    <MudImage Src="@currentSrc" Alt="images/cocktail.png" Class="img-fluid cocktailImage" @onclick="TogglePreview" @onerror="FallbackImage" />
    <MudContainer Style="padding-right: 0px">
        <MudText Color="@Color.Tertiary" Typo="Typo.h6" Class="mb-2">@Name.ToUpper()</MudText>
        <MudText Color="@Color.Secondary" Typo="Typo.body1">
            @string.Join(", ", Ingredients.Select(i => $"{i.Key}"/*{i.Value}ml*/))
        </MudText>
        @if (Garnishes.Count > 0)
        {
            <div style="display: flex; align-items: center;">
                <MudText Color="Color.Primary" Typo="Typo.body1">
                    Garnish:&nbsp;
                </MudText>
                <MudText Color="Color.Secondary" Typo="Typo.body1">
                    @string.Join(", ", Garnishes.Where(g => !string.IsNullOrEmpty(g)))
                </MudText>
            </div>
        }
    </MudContainer>
    @if (ShowActions)
    {
        @if (!IsProcessing)
        {
            <MudStack AlignItems="AlignItems.Center">


                <MudItem>
                    <MudButton Disabled="@IsProcessing" OnClick="@OnProcess" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small">
                        <MudText>Make</MudText>
                    </MudButton>
                </MudItem>

                <MudItem>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" OnClick="OnTune">
                        <MudText>Tune</MudText>
                    </MudButton>
                </MudItem>


            </MudStack>
        }
    }
    <MudPopover Class="popover" Open="@onPreview" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" @onclick="TogglePreview">
        <MudStack Spacing="2" AlignItems="AlignItems.Center" Class="mt-2" Row>
            <MudImage Src="@currentSrc" Alt="images/cocktail.png" Class="img-fluid cocktailImage focusedImage" @onerror="FallbackImage" />
            <MudStack Spacing="2" AlignItems="AlignItems.Center" Class="mt-2">

                <MudText Color="@Color.Tertiary" Typo="Typo.h6" Class="mb-2">@Name.ToUpper()</MudText>
                <MudItem style="display: flex; align-items: center;">
                    @foreach (var ingredient in Ingredients)
                    {
                        <MudText Color="@Color.Secondary" Typo="Typo.body1">
                            @ingredient.Key.ToString()
                            @ingredient.Value.ToString()ml
                        </MudText>
                    }
                </MudItem>
                @if (Garnishes.Count > 0)
                {
                    <MudItem style="display: flex; align-items: center;">
                        <MudText Color="Color.Primary" Typo="Typo.body1">
                            Garnish:&nbsp;
                        </MudText>
                        <MudText Color="Color.Secondary" Typo="Typo.body1">
                            @string.Join(", ", Garnishes.Where(g => !string.IsNullOrEmpty(g)))
                        </MudText>
                    </MudItem>
                }
                <MudSpacer /><MudSpacer />
                @if (ShowActions)
                {
                    <MudStack Spacing="3" Class="justify-center" Row="true">
                        @if (!IsProcessing)
                        {
                            <MudItem>
                                <MudButton Disabled="@IsProcessing" OnClick="@OnProcess" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small">
                                    <MudText>Make</MudText>
                                </MudButton>
                            </MudItem>
                            <MudItem>
                                <MudButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" OnClick="OnTune">
                                    <MudText>Tune</MudText>
                                </MudButton>
                            </MudItem>
                        }
                    </MudStack>
                }
            </MudStack>
        </MudStack>
    </MudPopover>
</MudStack>

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public string Name { get; set; }
    [Parameter] public Dictionary<string, decimal> Ingredients { get; set; } = new();
    [Parameter] public List<string> Garnishes { get; set; } = new();
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public bool IsProcessing { get; set; }
    [Parameter] public EventCallback OnProcess { get; set; }
    [Parameter] public EventCallback OnTune { get; set; }

    private bool onPreview { get; set; }
    private string currentSrc = "/images/cocktail.png";
    private void TogglePreview() => onPreview = !onPreview;

    [Inject] private IConfiguration Configuration { get; set; }
    [Inject] private IImageSourceService ImageService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        currentSrc = await ImageService.GetCocktailImageAsync(Id);
    }

    private void FallbackImage()
    {
        currentSrc = "/images/cocktail.png";
    }
}
